#!/usr/bin/env python3
"""
Check for monitoring status and age of Elasticsearch snapshots

MIT License

Copyright (c) 2019 Lee Clemens

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import argparse
import sys
import time
import traceback

import requests

STATUS_OK = 0
STATUS_WARNING = 1
STATUS_CRITICAL = 2
STATUS_UNKNOWN = 3

PREFIXES = {
    STATUS_OK: 'OK',
    STATUS_WARNING: 'WARNING',
    STATUS_CRITICAL: 'CRITICAL',
    STATUS_UNKNOWN: 'UNKNOWN'
}

ES_SNAPSHOT_STATE_SUCCESS = 'SUCCESS'
ES_SNAPSHOT_STATE_PARTIAL = 'PARTIAL'

# Only used internally and as the default, but never as an argument
THRESHOLD_SUFFIX_MILLIS = 'ms'
# These are supported from the argument (one character)
THRESHOLD_SUFFIX_SECONDS = 's'
THRESHOLD_SUFFIX_MINUTES = 'm'
THRESHOLD_SUFFIX_HOURS = 'h'
THRESHOLD_SUFFIX_DAYS = 'd'
THRESHOLD_SUFFIX_WEEKS = 'w'

THRESHOLD_SUFFIX_MULTIPLIERS = {
    THRESHOLD_SUFFIX_WEEKS: 7 * 24 * 60 * 60 * 1000,
    THRESHOLD_SUFFIX_DAYS: 24 * 60 * 60 * 1000,
    THRESHOLD_SUFFIX_HOURS: 60 * 60 * 1000,
    THRESHOLD_SUFFIX_MINUTES: 60 * 1000,
    THRESHOLD_SUFFIX_SECONDS: 1000,
    THRESHOLD_SUFFIX_MILLIS: 1,
}

THRESHOLD_SUFFIX_LABEL = {
    THRESHOLD_SUFFIX_WEEKS: 'weeks',
    THRESHOLD_SUFFIX_DAYS: 'days',
    THRESHOLD_SUFFIX_HOURS: 'hours',
    THRESHOLD_SUFFIX_MINUTES: 'minutes',
    THRESHOLD_SUFFIX_SECONDS: 'seconds',
    THRESHOLD_SUFFIX_MILLIS: 'millis',
}

DEFAULT_PERF_THRESHOLD_SUFFIXES = [THRESHOLD_SUFFIX_SECONDS, THRESHOLD_SUFFIX_DAYS]


class SnapshotInfo:
    """Class to retain information about the latest snapshot
    """

    def __init__(self, repository, snap_name, snap_date, snap_ms):
        """Initialize default snapshot information
        """
        self.__repository = repository
        self.__snap_name = snap_name
        self.snap_date = snap_date
        self.snap_ms = snap_ms

    @property
    def repository(self):
        """The repository which stores the snapshot
        """
        return self.__repository

    @repository.setter
    def repository(self, value):
        """Set the repository storing the snapshot
        """
        self.__repository = value

    @property
    def snap_name(self):
        """Get the snapshot name
        """
        return self.__snap_name

    @snap_name.setter
    def snap_name(self, value):
        """Set the snapshot name
        """
        self.__snap_name = value


class SnapshotQueryInfo:
    """Information for querying snapshot info via ES API
    """

    def __init__(self, scheme, server, port, subfolder, username, password, insecure):
        """Snapshot Query Information used for querying snapshot data
        """
        self.__scheme = scheme
        self.__server = server
        self.__port = port
        self.__subfolder = subfolder
        self.__username = username
        self.__password = password
        self.__insecure = insecure

    @property
    def scheme(self):
        """The scheme
        """
        return self.__scheme

    @property
    def server(self):
        """The server
        """
        return self.__server

    @property
    def port(self):
        """The port
        """
        return self.__port

    @property
    def subfolder(self):
        """The subfolder
        """
        return self.__subfolder

    @property
    def username(self):
        """The username
        """
        return self.__username

    @property
    def password(self):
        """The password
        """
        return self.__password

    @property
    def insecure(self):
        """Require https
        """
        return self.__insecure


def run(args):
    """Main run function to execute this check
    """
    return_status = STATUS_OK
    query_info = SnapshotQueryInfo(args.scheme, args.server, args.port, args.subfolder,
                                   args.username, args.password,
                                   args.insecure)
    newest_snapshot_info = SnapshotInfo(None, None, None, sys.maxsize)
    repositories = [args.repository] if args.repository else []
    disable_urllib3_warnings(args.insecure)
    if not repositories:
        for repository in query(query_info, '_snapshot/_all'):
            repositories.append(repository)
    now_ms = time.time() * 1000

    for repository in repositories:
        (repo_status,
         repo_newest_snapshot_millis,
         repo_newest_snapshot_name,
         repo_newest_snapshot_date) = check_repository_status(
            query_info,
            args.snap_name, args.allow_partial,
            args.warning_ms, args.critical_ms,
            repository, now_ms)
        if repo_status > return_status:
            return_status = repo_status
        if (repo_newest_snapshot_millis is not None
                and 0 < repo_newest_snapshot_millis < newest_snapshot_info.snap_ms):
            newest_snapshot_info.repository = repository
            newest_snapshot_info.snap_name = repo_newest_snapshot_name
            newest_snapshot_info.snap_date = repo_newest_snapshot_date
            newest_snapshot_info.snap_ms = repo_newest_snapshot_millis

    perf_newest_age_ms = now_ms - newest_snapshot_info.snap_ms
    exit_with_perf_data(args.threshold_suffix,
                        newest_snapshot_info,
                        perf_newest_age_ms,
                        return_status)


def disable_urllib3_warnings(insecure):
    """Disable urllib3 warnings if explicitly requested to do so
    """
    if insecure:
        # pylint: disable=import-outside-toplevel
        import urllib3
        from urllib3.exceptions import InsecureRequestWarning
        try:
            urllib3.disable_warnings(InsecureRequestWarning)
        except ImportError:
            # noinspection PyUnusedLocal
            urllib3 = None
            print('Failed to import urllib3 or requests.packages.urllib3')


def check_repository_status(query_info,
                            snap_name, allow_partial,
                            warning_ms, critical_ms,
                            repository, now_ms):
    """Evaluate the status of the snapshots for SUCCESS
    """
    newest_snapshot_time = 0
    newest_snapshot_name = None
    newest_snapshot_date = None
    for snapshot in query(query_info, f'_snapshot/{repository}/{snap_name}')['snapshots']:
        if ((snapshot['state'] == ES_SNAPSHOT_STATE_SUCCESS
             or (allow_partial and snapshot['state'] == ES_SNAPSHOT_STATE_PARTIAL))
                and snapshot['end_time_in_millis'] > newest_snapshot_time):
            newest_snapshot_time = snapshot['end_time_in_millis']
            newest_snapshot_name = snapshot['snapshot']
            newest_snapshot_date = snapshot['end_time']
    if newest_snapshot_name:
        status = check_status(warning_ms, critical_ms, newest_snapshot_time, now_ms)
        return (status,
                newest_snapshot_time,
                newest_snapshot_name,
                newest_snapshot_date)
    print(f'No snapshots found in repository: {repository}')
    return STATUS_UNKNOWN, None, None, None


def query(query_info, qry):
    """Query server for snapshots
    """
    # pylint: disable=broad-except
    try:
        req = requests.get(f'{query_info.scheme}://{query_info.server}:{query_info.port}'
                           f'/{query_info.subfolder}{qry}',
                           auth=(query_info.username, query_info.password),
                           verify=not query_info.insecure)
        if req.status_code == 200:
            return req.json()
        print(f'Failed to query: {query_info.scheme}://{query_info.server}:{query_info.port}'
              f'/{query_info.subfolder}{qry}.'
              f' Status Code: {req.status_code}')
    except requests.exceptions.ConnectionError as conn_error:
        print(f'Connection Error: {conn_error}')
    except Exception as exc:
        print(f'Unhandled Exception: {exc}')
    sys.exit(STATUS_CRITICAL)


def check_status(warning_ms, critical_ms, newest_snapshot_ms, now_ms):
    """Evaluate the status of the snapshot time against provided thresholds
    """
    if now_ms - newest_snapshot_ms >= critical_ms:
        return STATUS_CRITICAL
    if now_ms - newest_snapshot_ms >= warning_ms:
        return STATUS_WARNING
    return STATUS_OK


def exit_with_perf_data(threshold_suffix,
                        newest_snapshot_info,
                        perf_newest_age_ms,
                        exit_code):
    """Print result with perf data and exit
    """
    output_str = (f'{PREFIXES[exit_code]}'
                  f' - Most current Repository/Snapshot:'
                  f' {newest_snapshot_info.repository}'
                  f'/{newest_snapshot_info.snap_name}'
                  f' {newest_snapshot_info.snap_date}')
    if newest_snapshot_info.snap_name:
        output_str += ' |'
        perf_units = DEFAULT_PERF_THRESHOLD_SUFFIXES
        # Only add new threshold suffix if it's not one of the defaults
        if threshold_suffix not in perf_units:
            perf_units.append(threshold_suffix)
        for suffix in threshold_suffix:
            converted_time = convert_from_millis(perf_newest_age_ms, suffix)
            output_str += f' newest_age_{THRESHOLD_SUFFIX_LABEL[suffix]}={converted_time}'
    print(output_str)
    sys.exit(exit_code)


def parse_args():
    """Parse command line arguments
    """
    parser = argparse.ArgumentParser(
        'This plugin checks the Elasticsearch snapshots for either all'
        ' or a specific repository. It will test the age'
        ' of any successful snapshot, using the newest in each repository.')
    parser.add_argument('-m', '--scheme', type=str,
                        required=False,
                        dest='scheme',
                        default='http',
                        help='scheme (http/https defaults to http)')
    parser.add_argument('-s', '--server', type=str,
                        required=True,
                        default='localhost',
                        dest='server',
                        help='server')
    parser.add_argument('-p', '--port', type=int,
                        required=True,
                        default=9200,
                        dest='port',
                        help='port')
    parser.add_argument('--username', type=str,
                        required=False,
                        dest='username',
                        default=None,
                        help='username')
    parser.add_argument('--password', type=str,
                        required=False,
                        dest='password',
                        default=None,
                        help='password')
    parser.add_argument('--subfolder', type=str,
                        required=False,
                        dest='subfolder',
                        default='',
                        help='subfolder')
    parser.add_argument('-w', '--warning', type=str,
                        dest='warning_threshold_arg',
                        required=True,
                        help='warning time (ms or suffixed with {s,m,h,d,w})')
    parser.add_argument('-c', '--critical', type=str,
                        dest='critical_threshold_arg',
                        required=True,
                        help='critical time (ms or suffixed with {s,m,h,d,w})')
    parser.add_argument('-r', '--repository', type=str,
                        dest='repository',
                        default=None,
                        required=False,
                        help='repository')
    parser.add_argument('-n', '--snapname', type=str,
                        dest='snap_name',
                        default='_all',
                        required=False,
                        help='snapshot name (with wildcard)')
    parser.add_argument('--allow-partial',
                        dest='allow_partial',
                        default=False,
                        required=False,
                        action='store_true',
                        help=f'Treat {ES_SNAPSHOT_STATE_PARTIAL}'
                             f' snapshots as {ES_SNAPSHOT_STATE_SUCCESS}')
    parser.add_argument('--insecure',
                        dest='insecure',
                        default=False,
                        required=False,
                        action='store_true',
                        help='Do not verify SSL certificate and hide warnings')
    args = parser.parse_args()
    warn_ms, warn_threshold = get_threshold(args.warning_threshold_arg)
    crit_ms, crit_threshold = get_threshold(args.critical_threshold_arg)
    if warn_threshold != crit_threshold:
        # This is not entirely necessary, but simplifies.
        #   If there is a use-case for having these be different units, please open an Issue
        print('Warning and critical threshold suffixes must be the same')
        sys.exit(STATUS_UNKNOWN)
    if warn_ms > crit_ms:
        print('Warning must be less than critical')
        sys.exit(STATUS_CRITICAL)
    args.warning_ms = warn_ms
    args.critical_ms = crit_ms
    args.threshold_suffix = warn_threshold
    if args.subfolder and not args.subfolder.endswith('/'):
        args.subfolder += '/'
    return args


def get_threshold(arg_value):
    """Get threshold value in millis and suffix from argument
    """
    try:
        # the default is ms, attempt to convert the value
        return convert_to_millis(int(arg_value), THRESHOLD_SUFFIX_MILLIS), THRESHOLD_SUFFIX_MILLIS
    except ValueError:
        try:
            raw_time = float(arg_value[:-1])
            suffix = arg_value[-1]
            return convert_to_millis(raw_time, suffix, arg_value=arg_value), suffix
        except ValueError:
            print(f'Threshold is not numeric or uses an invalid suffix: {arg_value}')
            sys.exit(STATUS_UNKNOWN)


def convert_to_millis(raw_time, suffix, arg_value=None):
    """Convert raw time and suffix to milliseconds
    """
    if suffix in THRESHOLD_SUFFIX_MULTIPLIERS:
        return raw_time * THRESHOLD_SUFFIX_MULTIPLIERS[suffix]
    error_message = f'Unexpected suffix in threshold: {suffix}.'
    if arg_value:
        error_message += f' Complete threshold argument: {arg_value}'
    print(error_message)
    sys.exit(STATUS_UNKNOWN)


def convert_from_millis(time_ms, suffix):
    """Convert milliseconds to unit provided as suffix
    """
    if suffix in THRESHOLD_SUFFIX_MULTIPLIERS:
        return time_ms / THRESHOLD_SUFFIX_MULTIPLIERS[suffix]
    print(f'Unexpected suffix in threshold: {suffix}.')
    sys.exit(STATUS_UNKNOWN)


if __name__ == '__main__':
    try:
        run(parse_args())
    # pylint: disable=broad-except
    except Exception as ex:
        print(f'{sys.argv[0]}: Unhandled exception {type(ex)}')
        print(ex)
        traceback.print_exc()
        sys.exit(STATUS_CRITICAL)
